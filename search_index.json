[
["index.html", "The Sunshine List Chapter 1 Introduction", " The Sunshine List Matthew Huebsch 2016-10-01 Chapter 1 Introduction Every year, Ontario discloses the salaries of their public sector employees. Here we will take a look at the trends in the data.. "],
["analysis-of-2015-salaries.html", "Chapter 2 Analysis of 2015 Salaries 2.1 Salaries by University 2.2 Detailed look: Brock University", " Chapter 2 Analysis of 2015 Salaries 2.1 Salaries by University 2.1.1 Individual Salary Distributions rawData = read.csv(file.path(getwd(), &quot;Inputs&quot;, &quot;Salary Disclosure by year&quot;, &quot;Curated Data&quot;, &quot;2015&quot;, &quot;merged_file.csv&quot;), stringsAsFactors = F) rawData[, 4] = as.numeric(gsub(&quot;[$,]&quot;,&quot;&quot;, rawData[, 4])) rawData[, 5] = as.numeric(gsub(&quot;[$,]&quot;,&quot;&quot;, rawData[, 5])) rawData$Total.Compensation = rawData$Salary.Paid + rawData$Taxable.Benefits rawData_universities = rawData[rawData$Sector == &quot;Universities&quot;, ] for (i in (1:length(unique(rawData_universities$Employer)))){ #print(unique(rawData_universities$Employer)[i]) filtered_df = rawData_universities[rawData_universities$Employer == unique(rawData_universities$Employer)[i], ] hist(filtered_df$Salary.Paid, main = paste0(&quot;Compensation Distribution for &quot;, unique(rawData_universities$Employer)[i]), xlab = &quot;Total Compensation (Salary + Benefits)&quot;) } 2.1.2 Salary spread # boxplot(x = rawData_universities$Salary.Paid, data = filtered_df, formula = rawData_universities$Salary.Paid ~ rawData_universities$Employer) top_universities = c(&quot;University of Toronto&quot;, &quot;University of Ottawa&quot;, &quot;University of Waterloo&quot;, &quot;University of Western Ontario&quot;) set1 = unique(rawData_universities$Employer)[1:12] set2 = unique(rawData_universities$Employer)[13:25] set3 = unique(rawData_universities$Employer)[25:55] # Find the distribution of salaries across schools rawData_universities_split_1 = subset(rawData_universities, Employer %in% set1) rawData_universities_split_2 = subset(rawData_universities, Employer %in% set2) rawData_universities_split_3 = subset(rawData_universities, Employer %in% set3) boxplot(Salary.Paid ~ Employer, data = rawData_universities, las=2) boxplot(Salary.Paid ~ Employer, data = rawData_universities_split_1, las=2) boxplot(Salary.Paid ~ Employer, data = rawData_universities_split_2, las=2) boxplot(Salary.Paid ~ Employer, data = rawData_universities_split_3, las=2) ggplot(rawData_universities, aes(x=factor(Employer), y=Salary.Paid, fill=factor(Employer))) + geom_boxplot() + theme(axis.text.x = element_text(angle=90, vjust=0.5)) ggplot(rawData_universities, aes(x=factor(Employer), y=Salary.Paid, fill=factor(Employer))) + geom_boxplot() + theme(axis.text.x = element_text(angle=90, vjust=0.5)) + ylim(0,500000) ## Warning: Removed 4 rows containing non-finite values (stat_boxplot). rawData_universities$City = NA 2.2 Detailed look: Brock University # Find the distribution of salaries vs roles (for Brock, e.g.) rawData_universities_Brock = rawData_universities[rawData_universities$Employer == &quot;Brock University&quot;, ] #table(rawData_universities_Brock$Job.title) plot(table(rawData_universities_Brock$Job.title)) ggplot(rawData_universities_Brock, aes(x=factor(Job.title), y=Salary.Paid)) + geom_boxplot() + theme(axis.text.x = element_text(angle=90, vjust=0.5)) + ylim(0,500000) rawData_universities_Brock_noDup = rawData_universities_Brock[(duplicated(rawData_universities_Brock$Job.title) | duplicated(rawData_universities_Brock$Job.title, fromLast = TRUE)), ] rawData_universities_Brock_noDup$Job.title = with(rawData_universities_Brock_noDup, reorder(Job.title, Salary.Paid, median)) ggplot(rawData_universities_Brock_noDup, aes(x=factor(Job.title), y=Salary.Paid)) + geom_boxplot() + theme(axis.text.x = element_text(angle=90, vjust=0.5)) + ylim(0,500000) "],
["educational-cities.html", "Chapter 3 Educational cities", " Chapter 3 Educational cities # Create the table condensing down to school table(rawData_universities$Employer) ## ## Algoma University ## 43 ## Brescia University College ## 25 ## Brock University ## 583 ## Carleton University ## 778 ## Huntington University ## 8 ## Huron University College ## 30 ## King&#39;s University College ## 88 ## Lakehead University ## 300 ## Laurentian University of Sudbury ## 385 ## McMaster Divinity College ## 3 ## McMaster University ## 1137 ## Nipissing University ## 104 ## Northern Ontario School of Medicine ## 37 ## Ontario College of Art &amp; Design University ## 108 ## Queen&#39;s University ## 995 ## Ryerson University ## 1046 ## Saint Paul University / UniversitÃ© Saint-Paul ## 16 ## St. Jerome&#39;s University ## 24 ## St. Peter&#39;s Seminary ## 2 ## Thorneloe University ## 7 ## Trent University ## 249 ## Trinity College ## 14 ## UniversitÃ© de Hearst ## 4 ## University of Guelph ## 830 ## University of Ontario Institute of Technology ## 194 ## University of Ottawa ## 1400 ## University of St. Michael&#39;s College ## 20 ## University of Sudbury ## 9 ## University of Toronto ## 3288 ## University of Waterloo ## 1295 ## University of Western Ontario ## 1298 ## University of Windsor ## 546 ## Victoria University ## 34 ## Wilfrid Laurier University ## 556 ## York University ## 1609 summary_university = setDT(rawData_universities)[, list(Median.Salary = median(Salary.Paid)), by=Employer] # Refactor next line by putting city in whole dataframe, then condensing down summary_university$City = c(&quot;Sault Ste Marie&quot;, &quot;London&quot;, &quot;Ste Catharines&quot;, &quot;Ottawa&quot;, &quot;Sudbury&quot;, &quot;London&quot;, &quot;London&quot;, &quot;Thunder Bay&quot;, &quot;Sudbury&quot;, &quot;Hamilton&quot;, &quot;Hamilton&quot;, &quot;North Bay&quot;, &quot;Sudbury&quot;, &quot;Toronto&quot;, &quot;Kingston&quot;, &quot;Toronto&quot;, &quot;Ottawa&quot;, &quot;Waterloo&quot;, &quot;London&quot;, &quot;Sudbury&quot;, &quot;Peterborough&quot;, &quot;Toronto&quot;, &quot;Hearst&quot;, &quot;Ottawa&quot;, &quot;Guelph&quot;, &quot;Oshawa&quot;, &quot;Toronto&quot;,&quot;Sudbury&quot;, &quot;Toronto&quot;, &quot;Waterloo&quot;, &quot;London&quot;, &quot;Windsor&quot;, &quot;Toronto&quot;, &quot;Waterloo&quot;, &quot;Toronto&quot;) summary_city = summary_university[, list(Average.Salary = mean(Median.Salary)), by=City] barplot(height = summary_city$Average.Salary, names.arg = summary_city$City, las=2) rawData_universities_dt = data.table(rawData_universities) rawData_universities_dt$City[rawData_universities_dt$Employer == &quot;University of Toronto&quot; | rawData_universities_dt$Employer == &quot;York University&quot; | rawData_universities_dt$Employer == &quot;Ryerson University&quot; | rawData_universities_dt$Employer == &quot;University of St. Michael&#39;s College&quot; | rawData_universities_dt$Employer == &quot;Victoria University&quot; | rawData_universities_dt$Employer == &quot;Ontario College of Art &amp; Design University&quot; | rawData_universities_dt$Employer == &quot;Trinity College&quot;] = &quot;Toronto&quot; rawData_universities_dt$City[rawData_universities_dt$Employer == &quot;University of Ottawa&quot; | rawData_universities_dt$Employer == &quot;Carleton University&quot; | rawData_universities_dt$Employer == &quot;Saint Paul University / UniversitÃ© Saint-Paul&quot;] = &quot;Ottawa&quot; rawData_universities_dt$City[rawData_universities_dt$Employer == &quot;University of Western Ontario&quot; | rawData_universities_dt$Employer == &quot;Brescia University College&quot; | rawData_universities_dt$Employer == &quot;Huron University College&quot; | rawData_universities_dt$Employer == &quot;King&#39;s University College&quot; | rawData_universities_dt$Employer == &quot;St. Peter&#39;s Seminary&quot;] = &quot;London&quot; rawData_universities_dt$City[rawData_universities_dt$Employer == &quot;Algoma University&quot;] = &quot;Sault Ste Marie&quot; rawData_universities_dt$City[rawData_universities_dt$Employer == &quot;Brock University&quot;] = &quot;Ste Catharines&quot; rawData_universities_dt$City[rawData_universities_dt$Employer == &quot;Huntington University&quot; | rawData_universities_dt$Employer == &quot;Laurentian University of Sudbury&quot; | rawData_universities_dt$Employer == &quot;Northern Ontario School of Medicine&quot; | rawData_universities_dt$Employer == &quot;Thorneloe University&quot; | rawData_universities_dt$Employer == &quot;University of Sudbury&quot;] = &quot;Sudbury&quot; rawData_universities_dt$City[rawData_universities_dt$Employer == &quot;Lakehead University&quot;] = &quot;Thunder Bay&quot; rawData_universities_dt$City[rawData_universities_dt$Employer == &quot;McMaster University&quot; | rawData_universities_dt$Employer == &quot;McMaster Divinity College&quot;] = &quot;Hamilton&quot; rawData_universities_dt$City[rawData_universities_dt$Employer == &quot;Nipissing University&quot;] = &quot;North Bay&quot; rawData_universities_dt$City[rawData_universities_dt$Employer == &quot;Queen&#39;s University&quot;] = &quot;Kingston&quot; rawData_universities_dt$City[rawData_universities_dt$Employer == &quot;University of Guelph&quot;] = &quot;Guelph&quot; rawData_universities_dt$City[rawData_universities_dt$Employer == &quot;UniversitÃ© de Hearst&quot;] = &quot;Hearst&quot; rawData_universities_dt$City[rawData_universities_dt$Employer == &quot;University of Ontario Institute of Technology&quot;] = &quot;Oshawa&quot; rawData_universities_dt$City[rawData_universities_dt$Employer == &quot;Trent University&quot;] = &quot;Peterborough&quot; rawData_universities_dt$City[rawData_universities_dt$Employer == &quot;St. Jerome&#39;s University&quot; | rawData_universities_dt$Employer == &quot;University of Waterloo&quot; | rawData_universities_dt$Employer == &quot;Wilfrid Laurier University&quot;] = &quot;Waterloo&quot; rawData_universities_dt$City[rawData_universities_dt$Employer == &quot;University of Windsor&quot;] = &quot;Windsor&quot; summary_city = rawData_universities_dt[, list(Median.Salary = median(Salary.Paid)), by=City] summary_city = summary_city[order(Median.Salary)] barplot(height = summary_city$Median.Salary, names.arg = summary_city$City, las=2, ylab = &quot;Median Salary for City ($)&quot;) rawData_universities_dt$City = with(rawData_universities_dt, reorder(City, Salary.Paid, median)) city_vs_salary_plot = ggplot(rawData_universities_dt, aes(x=factor(City), y=Salary.Paid, fill=factor(City)))+ geom_boxplot() + theme(axis.text.x = element_text(angle=90, vjust=0.5)) + ylim(0,500000) + xlab(&quot;City&quot;) + ylab(&quot;Salary Paid&quot;) + ggtitle(&quot;Distribution of salaries for university locations&quot;) ggplotly(city_vs_salary_plot) ## Warning: Removed 4 rows containing non-finite values (stat_boxplot). # Find the cost of living for city and plot against median salary for university # Find the tuition for school and plot against median salary for university # Find the school&#39;s ranking and plot against median salary for university "],
["by-year-universities.html", "Chapter 4 By year - Universities", " Chapter 4 By year - Universities years = seq(2001, 2015, by=1) if(F){ data_list = list() for (i in 1:length(years)){ data_list[[i]] = read.csv(file.path(getwd(), &quot;Inputs&quot;, &quot;Salary Disclosure by year&quot;, &quot;Curated Data&quot;, years[i], &quot;merged_file.csv&quot;), stringsAsFactors = F) data_list[[i]]$Salary.Paid = as.numeric(gsub(&quot;[$,]&quot;,&quot;&quot;, data_list[[i]]$Salary.Paid)) data_list[[i]]$Taxable.Benefits = as.numeric(gsub(&quot;[$,]&quot;,&quot;&quot;, data_list[[i]]$Taxable.Benefits)) data_list[[i]]$Total.Compensation = data_list[[i]]$Salary.Paid + data_list[[i]]$Taxable.Benefits data_list[[i]] = data_list[[i]][data_list[[i]]$Sector == &quot;Universities&quot;, ] #universities only for now } } data_total = read.csv(file.path(getwd(), &quot;Inputs&quot;, &quot;Salary Disclosure by year&quot;, &quot;Curated Data&quot;, years[1], &quot;total_file.csv&quot;), stringsAsFactors = F) data_total = data_total[, c(&quot;Sector&quot;, &quot;Last.name&quot;, &quot;First.name&quot;, &quot;Salary.Paid&quot;, &quot;Taxable.Benefits&quot;, &quot;Employer&quot;, &quot;Job.title&quot;, &quot;Calendar.Year&quot;)] for (i in 2:length(years)){ data_to_bind = read.csv(file.path(getwd(), &quot;Inputs&quot;, &quot;Salary Disclosure by year&quot;, &quot;Curated Data&quot;, years[i], &quot;total_file.csv&quot;), stringsAsFactors = F) data_to_bind = data_to_bind[, c(&quot;Sector&quot;, &quot;Last.name&quot;, &quot;First.name&quot;, &quot;Salary.Paid&quot;, &quot;Taxable.Benefits&quot;, &quot;Employer&quot;, &quot;Job.title&quot;, &quot;Calendar.Year&quot;)] data_total = rbind(data_total, data_to_bind) } data_total$Salary.Paid = as.numeric(gsub(&quot;[$,]&quot;,&quot;&quot;, data_total$Salary.Paid)) ## Warning: NAs introduced by coercion data_total$Taxable.Benefits = as.numeric(gsub(&quot;[$,]&quot;,&quot;&quot;, data_total$Taxable.Benefits)) ## Warning: NAs introduced by coercion data_total$Total.Compensation = data_total$Salary.Paid + data_total$Taxable.Benefits # Over time (entire public sectors) compensation_over_time_plot = ggplot(data_total, aes(x=factor(Calendar.Year), y=Total.Compensation, fill=factor(Calendar.Year))) + geom_boxplot() + theme(axis.text.x = element_text(angle=90, vjust=0.5)) + ylim(0,1500000) + xlab(&quot;Calendar Year&quot;) + ylab(&quot;Total Compensation&quot;) + ggtitle(&quot;Salaries over time for all sectors&quot;) # ggplotly(compensation_over_time_plot) compensation_over_time_plot_zoomed = ggplot(data_total, aes(x=factor(Calendar.Year), y=Total.Compensation, fill=factor(Calendar.Year))) + geom_boxplot() + theme(axis.text.x = element_text(angle=90, vjust=0.5)) + ylim(0,1500000) + coord_cartesian(ylim=c(0,300000)) + xlab(&quot;Calendar Year&quot;) + ylab(&quot;Total Compensation&quot;) + ggtitle(&quot;Salaries over time for all sectors&quot;) # ggplotly(compensation_over_time_plot_zoomed) # Different sectors over time #sectors = unique(data_total$Sector) sectors = c(&quot;Colleges&quot;, &quot;Universities&quot;, &quot;Electricity&quot;, &quot;Hospitals&quot;, &quot;Municipalities&quot;, &quot;Other&quot;, &quot;SchoolBoards&quot;, &quot;Ministries&quot;, &quot;Legislative&quot;)# Stick with the well curated sectors for now for(i in 1:length(sectors)){ compensation_over_time_plot = ggplot(data_total[data_total$Sector == sectors[i], ], aes(x=factor(Calendar.Year), y=Total.Compensation, fill=factor(Calendar.Year))) + geom_boxplot() + theme(axis.text.x = element_text(angle=90, vjust=0.5)) + ylim(0,1500000) + coord_cartesian(ylim=c(0,300000)) + xlab(&quot;Calendar Year&quot;) + ylab(&quot;Total Compensation&quot;) + ggtitle(paste0(&quot;Salaries over time for &quot;, sectors[i])) print(compensation_over_time_plot) #ggplotly(compensation_over_time_plot) } ## Warning: Removed 15 rows containing non-finite values (stat_boxplot). ## Warning: Removed 15 rows containing non-finite values (stat_boxplot). ## Warning: Removed 1 rows containing non-finite values (stat_boxplot). ## Warning: Removed 6 rows containing non-finite values (stat_boxplot). ## Warning: Removed 3 rows containing non-finite values (stat_boxplot). ## Warning: Removed 1 rows containing non-finite values (stat_boxplot). # data_total = data_total[data_total$Sector == &quot;Universities&quot;, ] # Universities only for now # compensation_over_time_plot = ggplot(data_total, aes(x=factor(Calendar.Year), y=Total.Compensation, fill=factor(Calendar.Year))) + geom_boxplot() + theme(axis.text.x = element_text(angle=90, vjust=0.5)) + ylim(0,1500000) # ggplotly(compensation_over_time_plot) for (i in 1:length(years)){ hist(data_total[data_total$Calendar.Year==years[i], ]$Total.Compensation, breaks = 100, xlim = c(0,300000)) } a= hist(data_total[data_total$Calendar.Year==years[i], ]$Total.Compensation, breaks = 100, xlim = c(0,300000)) # b = data.frame(x=a$mids, r=a$counts) #(b &lt;- nls( r ~ k*exp(-1/2*(x-mu)^2/sigma^2), start=c(mu=120000,sigma=5,k=1) , data = b)) #v &lt;- summary(b)$parameters[,&quot;Estimate&quot;] "],
["methods.html", "Chapter 5 Methods", " Chapter 5 Methods We describe our methods in this chapter. "],
["applications.html", "Chapter 6 Applications 6.1 Example one 6.2 Example two", " Chapter 6 Applications Some significant applications are demonstrated in this chapter. 6.1 Example one 6.2 Example two "],
["final-words.html", "Chapter 7 Final Words", " Chapter 7 Final Words We have finished a nice book. "],
["references.html", "Chapter 8 References", " Chapter 8 References Source information, where Ontario publishes the salaries for public sector workers in Ontario who earn more than $100,000 per year. R, the open source language used to generate the analysis. R Studio, the IDE that was used to write this. R Markdown, the rendering language to create the HTML report. "]
]
